#!/usr/bin/env python

from collections import defaultdict
from billy.utils import db
import json
import sys

def csv_response(spec, **kwargs):
    bills = db.bills.find(spec)
    counts = defaultdict(int)
    high_score = 0

    chamber = kwargs.get('chamber', [])
    types = kwargs.get('type', [])

    buf = "Date,Count,Pct\n"

    for bill in bills:
        for action in bill['actions']:
            date = action['date'].strftime("%Y-%m-%d")
            actor = action['actor']
            state = bill['state']
            typez = action['type']

            if chamber != [] and not actor in chamber:
                continue

            if types != []:
                found = False
                for t in typez:
                    if t in types:
                        found = True

                if not found:
                    continue

            key = "%s" % (
                date
            )
            counts[key] += 1
            if counts[key] > high_score:
                high_score = counts[key]

    for line in counts:
        date = line
        count = counts[line]
        buf += "%s,%s,%s\n" % (
            date, count, float(count) / float(high_score)
        )
    return buf


objs = json.load(open(sys.argv[1], 'r'))
for state in objs['states']:
    for chamber in objs['chambers']:
        spec = {
            "state": state
        }
        if state == "all":
            del(spec['state'])

        if chamber is not None:
            spec['chamber'] = chamber
        else:
            chamber = "combined"

        open("%s/%s-%s.csv" % (
            objs['output'], state, chamber
        ), 'w').write(csv_response(spec))
        print "Wrote out %s (%s)" % (state, chamber)

